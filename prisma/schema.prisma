datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.vsigbekcrsdrmabmvyvf:IDKWcc9dtYY0gx7K@aws-0-ap-south-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
  directUrl = "postgresql://postgres.vsigbekcrsdrmabmvyvf:IDKWcc9dtYY0gx7K@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
}
generator client {
  provider = "prisma-client-js"
}

model User {
  id         String      @id @default(cuid())  
  email      String      @unique
  firstName  String
  lastName   String
  role       Role        @default(STUDENT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  rollNo     String?
  year       String?
  division   String?
  srn        String?     @unique
  prn        String?     @unique
  officeHours String?
  memberships    Membership[]
  classroomsCreated Classroom[] @relation("ClassroomCreator")
  assignmentsCreated Assignment[] @relation("AssignmentCreator")
  submissions    Submission[]
  attendances    Attendance[]
  resourcesUploaded Resource[] @relation("ResourceUploader")
}

enum Role {
  STUDENT
  PROFESSOR
  ADMIN
}

model Classroom {
  id         Int        @id @default(autoincrement())
  name       String
  code       String     @unique
  inviteLink String     @unique
  year       String
  division   String
  courseCode String
  courseName String
  creator    User       @relation("ClassroomCreator", fields: [creatorId], references: [id])
  creatorId  String
  memberships Membership[]
  assignments Assignment[]
  attendances Attendance[]
  resources   Resource[]
}

model Membership {
  userId      String
  classroomId Int
  user        User     @relation(fields: [userId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  @@id([userId, classroomId])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  deadline    DateTime
  type        String
  createdAt   DateTime @default(now())
  creator     User     @relation("AssignmentCreator", fields: [creatorId], references: [id])
  creatorId   String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
  submissions Submission[]
}

model Submission {
  id           Int       @id @default(autoincrement())
  submittedAt  DateTime  @default(now())
  content      String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  marks        Int       @default(0)

  @@unique([userId, assignmentId])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime
  isPresent   Boolean
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int

  @@unique([userId, classroomId, date])
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  uploader    User     @relation("ResourceUploader", fields: [uploaderId], references: [id])
  uploaderId  String
  uploadedAt  DateTime @default(now())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
}
