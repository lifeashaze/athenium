datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"

}

model User {
  id         String      @id @default(cuid())  
  email      String      @unique
  firstName  String
  lastName   String
  role       Role        @default(STUDENT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  rollNo     String?
  year       String?
  division   String?
  srn        String?     @unique
  prn        String?     @unique
  officeHours String?
  notes       Note[]
  memberships    Membership[]
  classroomsCreated Classroom[] @relation("ClassroomCreator")
  assignmentsCreated Assignment[] @relation("AssignmentCreator")
  submissions    Submission[]
  attendances    Attendance[]
  resourcesUploaded Resource[] @relation("ResourceUploader")
  notifications Notification[] @relation("UserNotifications")
}

enum Role {
  STUDENT
  PROFESSOR
  ADMIN
}

model Classroom {
  id         String     @id @default(cuid())
  name       String
  code       String     @unique
  inviteLink String     @unique
  year       String
  division   String
  courseCode String
  courseName String
  creator    User       @relation("ClassroomCreator", fields: [creatorId], references: [id])
  creatorId  String
  memberships Membership[]
  assignments Assignment[]
  attendances Attendance[]
  resources   Resource[]
  notes       Note[]
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text    // Using Text type for longer content
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        String[]  // For storing classroom titles and custom tags
  isFavorite  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?
}

model Membership {
  userId      String
  classroomId String
  user        User     @relation(fields: [userId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  @@id([userId, classroomId])
}

model Assignment {
  id           String    @id @default(cuid())
  title        String
  description  String   @default("")
  requirements String[] @default([])
  deadline     DateTime
  maxMarks     Int      @default(25)  
  createdAt    DateTime @default(now())
  creator      User     @relation("AssignmentCreator", fields: [creatorId], references: [id])
  creatorId    String
  classroom    Classroom @relation(fields: [classroomId], references: [id])
  classroomId  String
  submissions  Submission[]
}

model Submission {
  id           String    @id @default(cuid())
  submittedAt  DateTime  @default(now())
  content      String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  marks        Int       @default(0)
  @@unique([userId, assignmentId])
}

model Attendance {
  id          String   @id @default(cuid())
  date        DateTime
  isPresent   Boolean
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String

  @@unique([userId, classroomId, date])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  url         String
  uploader    User     @relation("ResourceUploader", fields: [uploaderId], references: [id])
  uploaderId  String
  uploadedAt  DateTime @default(now())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  category    String?  
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      NotificationType
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  users     User[]   @relation("UserNotifications")
  relatedId String?  // This can store the ID of the related entity
}

enum NotificationType {
  ASSIGNMENT
  ATTENDANCE
  MEMBERSHIP
  RESOURCE
  GENERAL
}
